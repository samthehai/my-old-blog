{"pageProps":{"postData":{"id":"react_for_vue_developer_translation","contentHtml":"<h1>1. Gi·ªõi thi·ªáu</h1>\n<p>ƒêang h·ªçc React.js ƒë·ªÉ √°p d·ª•ng cho c√°c d·ª± √°n ƒëang l√†m th√¨ b√≠ stuck m·ªôt s·ªë ch·ªó.\nNh√¢n ti·ªán ki·∫øm ƒë∆∞·ª£c tr√™n m·∫°ng m·ªôt t√†i li·ªáu m√¨nh th·∫•y hay gi·ªõi thi·ªáu v·ªÅ React cho nh·ªØng ai ƒë√£ c√≥ n·ªÅn t·∫£ng Vue.js\nM√¨nh l∆∞·ª£c d·ªãch l·∫°i t√†i li·ªáu n√†y sang Ti·∫øng Vi·ªát nh∆∞ m·ªôt c√°ch ƒë·ªÉ active learning lu√¥n.</p>\n<h2>Table of contents</h2>\n<ul>\n<li>Templates</li>\n<li>Props</li>\n<li>Data</li>\n<li>Computed properties</li>\n<li>Methods</li>\n<li>Events</li>\n<li>Lifecycle methods</li>\n<li>Watchers</li>\n<li>Slots &amp; scoped slots</li>\n<li>Provide / inject</li>\n<li>Custom directives</li>\n<li>Transitions</li>\n</ul>\n<h1>2. Templates</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: JSX</p>\n<p>Vue s·ª≠ d·ª•ng HTML strings v·ªõi m·ªôt v√†i custom directives. Th∆∞·ªùng th√¨ .vue fil√© s√© ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√°ch bi·ªát templates v√† script v√† c√≥ th·ªÉ c√≥ styles n·ªØa.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Greeter.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello, {{ name }}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"name\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>React s·ª≠ d·ª•ng m·ªôt script m·ªü r·ªông c·ªßa ECMAScript g·ªçi l√† JSX.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Greeter</span>(<span class=\"hljs-params\">{ name }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello, {name}!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n}\n</code></pre>\n<h2>2.1. Conditional rendering</h2>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: S·ª≠ d·ª•ng logic &amp;&amp; operator, tenary statements ho·∫∑c l√† early return</p>\n<p>Vue s·ª≠ d·ª•ng v-if, v-else v√† v-else-if ƒë·ªÉ render c√≥ ƒëi·ªÅu ki·ªán m·ªôt ph·∫ßn c·ªßa templates</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Awesome.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"awesome\"</span>&gt;</span>Vue is awesome!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"awesome\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>React th√¨ kh√¥ng h·ªó tr·ª£ directive n√™n l√† b·∫°n ph·∫£i s·ª≠ d·ª•ng ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë·ªÉ tr·∫£ v·ªÅ c√≥ ƒëi·ªÅu ki·ªán m·ªôt ph·∫ßn c·ªßa templates.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Awesome</span>(<span class=\"hljs-params\">{ awesome }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>{awesome &amp;&amp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Vue is awesome!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>;\n}\n</code></pre>\n<p>Trong tr∆∞·ªùng h·ªçp c·∫ßn else statement th√¨ b·∫°n ph·∫£i s·ª≠ d·ª•ng tenary statements</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Awesome</span>(<span class=\"hljs-params\">{ awesome }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n      {awesome ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>React is awesome!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span> : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Oh no üò¢<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>};\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>B·∫°n c≈©ng c√≥ th·ªÉ t√°ch bi√™t hai x·ª≠ l√Ω b·∫±ng c√°ch s·ª≠ d·ª•ng early return</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Awesome</span>(<span class=\"hljs-params\">{ awesome }</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!awesome) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Oh no üò¢<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>\n    );\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>React is awesome!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<h2>2.2. List rendering</h2>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: Array.map</p>\n<p>Vue s·ª≠ d·ª•ng v-for directive ƒë·ªÉ l·∫∑p qua objects v√† arrays</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Recipe.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(ingredient, index) in ingredients\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"index\"</span>&gt;</span>\n      {{ ingredient }}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"ingredients\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>V·ªõi React b·∫°n c√≥ th·ªÉ map array ƒë·ªÉ t·∫°o danh s√°ch elements s·ª≠ d·ª•ng h√†m build in Array.map c·ªßa javascript</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Recipe</span>(<span class=\"hljs-params\">{ ingredients }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      {ingredients.map((ingredient, index) =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>{ingredient}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>Duy·ªát qua object th√¨ kh√≥ h∆°n. Vue cho ph√©p s·ª≠ d·ª•ng v-for directives ƒë·ªÉ duy·ªát qua keys v√† values.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- KeyValueList.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(value, key) in object\"</span> <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"key\"</span>&gt;</span>{{ key }}: {{ value }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"object\"</span>], <span class=\"hljs-comment\">// E.g. { a: 'Foo', b: 'Bar' }</span>\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>C√° nh√¢n t√¥i th√¨ th√≠ch s·ª≠ d·ª•ng h√†m builtin Object.entries v·ªõi React ƒë·ªÉ duy·ªát qua object.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">KeyValueList</span>(<span class=\"hljs-params\">{ object }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      {Object.entries(object).map(([key, value]) =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{key}</span>&gt;</span>{value}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<h2>2.3. Class v√† style bindings</h2>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: Truy·ªÅn props theo c√°ch manual</p>\n<p>Vue t·ª± ƒë·ªông binds class v√† style props xu·ªëng cho HTML element ngo√†i c√πng c·ªßa m·ªôt component.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Post.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"title\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!--\n&lt;post\n  :title=\"About CSS\"\n  class=\"margin-bottom\"\n  style=\"color: red\"\n/&gt;\n--&gt;</span>\n</code></pre>\n<p>V·ªõi React, b·∫°n c·∫ßn truy·ªÅn className v√† style props m√¥t c√°ch manually. Ch√∫ √Ω r·∫±ng style ph·∫£i l√† m·ªôt object v·ªõi React, strings th√¨ kh√¥ng ƒë∆∞·ª£c support.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Post</span>(<span class=\"hljs-params\">{ title, className, style }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{className}</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{style}</span>&gt;</span>\n      {title}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>\n  );\n}\n\n{\n  <span class=\"hljs-comment\">/* &lt;Post\n  title=\"About CSS\"\n  className=\"margin-bottom\"\n  style={{ color: 'red' }}\n/&gt; */</span>\n}\n</code></pre>\n<p>N·∫øu b·∫°n mu·ªën truy·ªÅn xu·ªëng t·∫•t c·∫£ c√°c props c√≤n l·∫°i, c√≥ th·ªÉ s·ª≠ d·ª•ng spread operator.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Post</span>(<span class=\"hljs-params\">{ title, ...props }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span> {<span class=\"hljs-attr\">...props</span>}&gt;</span>{title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span></span>;\n}\n</code></pre>\n<p>N·∫øu b·∫°n mu·ªën s·ª≠ d·ª•ng API class gi·ªëng nh∆∞ b√™n Vue, c√≥ th·ªÉ tham kh·∫£o th·ª≠ vi·ªán <a href=\"https://github.com/JedWatson/classnames\">classnames</a> c·ªßa Jed Watson.</p>\n<h1>3. Props</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng v√™n React: Props</p>\n<p>Props b√™n React ho·∫°t d·ªông g·∫ßn nh∆∞ t∆∞∆°ng t·ª± b√™n Vue. Ch·ªâ c√≥ m·ªôt kh√°c bi·ªát nh·ªè: React kh√¥ng <a href=\"https://vuejs.org/v2/api/#inheritAttrs\">th·ª´a k·∫ø</a> nh·ªØng atributes kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Post.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"title\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>\n</span></code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Post</span>(<span class=\"hljs-params\">{ title }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span> {{ title }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span></span>;\n}\n</code></pre>\n<p>C√≥ th·ªÉ s·ª≠ d·ª•ng dynamic bind b·∫±ng c√°ch s·ª≠ d·ª•ng prefix :, ƒë√¢y ch√≠nh l√† alias c·ªßa directive v-bind. React th√¨ l·∫°i s·ª≠ d·ª•ng d·∫•u ngo·∫∑c nh·ªçn.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Post.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">post-title</span> <span class=\"hljs-attr\">:title</span>=<span class=\"hljs-string\">\"title\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"title\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Post</span>(<span class=\"hljs-params\">{ title }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PostTitle</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{title}</span> /&gt;</span></span>;\n}\n</code></pre>\n<h2>4. Data</h2>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: useState hook</p>\n<p>Trong Vue data option ƒë∆∞·ª£c s·ª≠ d·ª•ng d·ªÉ ch·ª©a tr·∫°ng th√°i local c·ªßa component.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- ButtonCounter.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"count++\"</span>&gt;</span>You clicked me {{ count }} times.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data() {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n      };\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>React th√¨ s·ª≠ d·ª•ng useState hook, s·∫Ω tr·∫£ v·ªÅ m·ªôt array c√≥ hai ph·∫ßn t·ª≠ ch·ª©a tr·∫°ng th√°i hi·ªán t·∫°i v√† m·ªôt h√†m setter.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ButtonCounter</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [count, setCounter] = useState(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(count + 1)}&gt;{count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n}\n</code></pre>\n<p>B·∫°n c√≥ th·ªÉ chia m·ªói state ra b·∫±ng c√°ch g·ªçi useState nhi·ªÅu l·∫ßn ho·∫∑c g·ªôp l·∫°i g·ªçi m·ªôt l·∫ßn.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ProfileForm</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [name, setName] = useState(<span class=\"hljs-string\">\"Sebastian\"</span>);\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = useState(<span class=\"hljs-string\">\"sebastian@spatie.be\"</span>);\n\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ProfileForm</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [values, setValues] = useState({\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Sebastian\"</span>,\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">\"sebastian@spatie.be\"</span>,\n  });\n\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<h2>4.1. v-model</h2>\n<p>v-model l√† m·ªôt directive r·∫•t h·ªØu √≠ch trong Vue, n√≥ k·∫øt h·ª£p vi·ªác truy·ªÅn gi√° tr·ªã xu·ªëng th√¥ng qua prop v·ªõi vi·ªác l·∫Øng nghe input event. ƒêi·ªÅu n√†y c√≥ th·ªÉ khi·∫øn g√¢y nh·∫ßm l·∫´n r·∫±ng Vue th·ª±c hi·ªán biding hai chi·ªÅu, nh∆∞ng th·∫≠t ra c∆° ch·∫ø ·∫©n d∆∞·ªõi v·∫´n l√† ‚Äútruy·ªÅn props xu·ªëng, nh·∫≠n events tr·∫£ l√™n‚Äù.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Profile.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"name\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data() {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Sebastian\"</span>,\n      };\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>C√≥ th·ªÉ tri·ªÉn khai ƒë·∫ßy ƒë·ªß v-model th√†nh nh∆∞ d∆∞·ªõi n√†y:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"name\"</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"name = $event.tagert.value\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p>Tuy nhi√™n b√™n React kh√¥ng c√≥ c√°ch bi·ªÉu di·ªÖn t∆∞∆°ng t·ª±, b·∫°n lu√¥n ph·∫£i vi·∫øt t∆∞·ªùng m√¨nh.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Profile</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [name, setName] = useState(<span class=\"hljs-string\">\"Sebastian\"</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(event)</span> =&gt;</span> setName(event.target.name)}\n    /&gt;</span>\n  );\n}\n</code></pre>\n<h2>4.2. Computed properties</h2>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: bi·∫øn, wrap l·∫°i b·∫±ng useMemo</p>\n<p>C√≥ hai l√Ω do cho vi·ªác t·ªìn t·∫°i c·ªßa computed properties trong Vue: d·ªÉ tr√°nh vi·ªác tr·ªôn l·∫´n gi·ªØa logic v√† markup trong template, ƒë·ªÉ cache nh·ªØng ph·∫ßn ƒë√≤i h·ªèi t√≠nh to√°n ph·ª©c t·∫°p trong component state.</p>\n<p>N·∫øu m√† kh√¥ng c√≥ computed:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- ReversedMessage.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ message.split('').reverse().join('') }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"message\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ReversedMessage</span>(<span class=\"hljs-params\">{ message }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{message.split(\"\").reverse().join(\"\")}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n}\n</code></pre>\n<p>Trong React b·∫°n c√≥ th·ªÉ t√°ch ph·∫ßn logic kh·ªèi template b·∫±ng c√°ch g√°n gi√° tr·ªã k·∫øt qu·∫£ v√†o m·ªôt bi·∫øn.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- ReversedMessage.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ reversedMessage }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">\"message\"</span>],\n\n    <span class=\"hljs-attr\">computed</span>: {\n      reversedMessage() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.message.split(<span class=\"hljs-string\">\"\"</span>).reverse().join(<span class=\"hljs-string\">\"\"</span>);\n      },\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ReversedMessage</span>(<span class=\"hljs-params\">{ message }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> reversedMessage = message.split(<span class=\"hljs-string\">\"\"</span>).reverse().join(<span class=\"hljs-string\">\"\"</span>);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{reversedMessage}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n}\n</code></pre>\n<p>N·∫øu ch√∫ tr·ªçng ƒë·∫øn performance, vi·ªác t√≠nh to√°n c√≥ th·ªÉ ƒë∆∞·ª£c wrap l·∫°i b·∫±ng c√°ch s·ª≠ d·ª•ng useMemo hook, useMemo y√™u c·∫ßu ph·∫£i c√≥ m·ªôt h√†m callback tr·∫£ v·ªÅ k·∫øt qu·∫£ t√≠nh to√°n v√† m·ªôt m·∫£ng c·ªßa dependencies.</p>\n<p>Trong v√≠ d·ª• sau ƒë√¢y <code>reversedMessage</code> ch·ªâ ph·∫£i b·ªã t√≠nh to√°n l·∫°i n·∫øu nh∆∞ bi·∫øn <code>message</code> n√≥ ph·ª• thu·ªôc b·ªã thay ƒë·ªïi</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useMemo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ReversedMessage</span>(<span class=\"hljs-params\">{ message }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> reversedMessage = useMemo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> message.split(<span class=\"hljs-string\">\"\"</span>).reverse().join(<span class=\"hljs-string\">\"\"</span>);\n  }, [message]);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{reversedMessage}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n}\n</code></pre>\n<h1>5. Methods</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: Functions</p>\n<p>Vue c√≥ m·ªôt options t√™n l√† methods ƒë·ªÉ khai b√°o c√°c h√†m ƒë∆∞·ª£c s·ªß d·ª•ng b√™n trong component</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- ImportantButton.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">\"doSomething\"</span>&gt;</span>Do something!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">methods</span>: {\n      doSomething() {\n        <span class=\"hljs-comment\">// ...</span>\n      },\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Trong React b·∫°n c√≥ th·ªÉ khai b√°o m·ªôt functions b√¨nh th∆∞·ªùng ·ªü b√™n trong component.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ImportantButton</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{doSomething}</span>&gt;</span>Do something!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n}\n</code></pre>\n<h1>6. Events</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: Callback props</p>\n<p>Events l√† nh·ªØng callback c·∫ßn thi·∫øt ƒë∆∞·ª£c g·ªçi khi c√≥ nh·ªØng s·ª± ki·ªán x·∫£y ra ph√≠a component con. Events l√† m·ªôt th√†nh ph·∫ßn quan tr·ªçng trong Vue, b·∫°n c√≥ th·ªÉ l·∫Øng nghe n√≥ s·ª≠ d·ª•ng @, l√† th·ªÉ ng·∫Øn g·ªçn c·ªßa v-on.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- PostForm.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"$emit('save')\"</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"$emit('publish')\"</span>&gt;</span>Publish<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p>Events kh√¥ng c√≥ b·∫•t k·ª≥ √Ω nghƒ©a ƒë·∫∑c bi·ªát n√†o nh∆∞ v·∫≠y b√™n React, n√≥ ƒë∆°n gi·∫£n ch·ªâ l√† nh·ªØng callback prop ƒë∆∞·ª£c g·ªçi b·ªüi nh·ªØng component con.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PostForm</span>(<span class=\"hljs-params\">{ onSave, onPublish }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onSave}</span>&gt;</span>\n        Save\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onPublish}</span>&gt;</span>\n        Publish\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<h2>6.1. Event modifier</h2>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: Higher order function</p>\n<p>Vue c√≥ m·ªôt v√†i modifier nh∆∞ <code>prevent</code>, <code>stop</code> ƒë·ªÉ thay ƒë·ªïi c√°ch m√† event ƒë∆∞·ª£c handle m√† kh√¥ng c·∫ßn ph·∫£i ch·ªânh s·ª≠a l·∫°i handler.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- AjaxForm.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> @<span class=\"hljs-attr\">submit.prevent</span>=<span class=\"hljs-string\">\"submitWithAjax\"</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">methods</span>: {\n      submitWithAjax() {\n        <span class=\"hljs-comment\">// ...</span>\n      },\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Kh√¥ng c√≥ nh·ªØng modiffier nh∆∞ v·∫≠y trong React. Prevent default v√† stopping h·∫ßu nh∆∞ s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b√™n trong h√†m callback.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">AjaxForm</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">submitWithAjax</span>(<span class=\"hljs-params\">event</span>) </span>{\n    event.preventDefault();\n    <span class=\"hljs-comment\">// ...</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{submitWithAjax}</span>&gt;</span>{/* ... */}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>;\n}\n</code></pre>\n<p>N·∫øu b·∫°n th·ª±c mu·ªën c√≥ c√°i g√¨ ƒë√≥ gi·ªëng nh∆∞ l√† modifier b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng higher order function.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">prevent</span>(<span class=\"hljs-params\">callback</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>) =&gt;</span> {\n    event.preventDefault();\n    callback(event);\n  };\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">AjaxForm</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">submitWithAjax</span>(<span class=\"hljs-params\">event</span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{prevent(submitWithAjax)}</span>&gt;</span>{/* ... */}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>;\n}\n</code></pre>\n<h1>7. Lifecycle methods</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: <code>useEffect</code> hook</p>\n<p>ƒê·ªëi v·ªõi class component, React c√≥ nh·ªØng <a href=\"https://reactjs.org/docs/react-component.html#the-component-lifecycle\">API t∆∞∆°ng t·ª±</a> Vue n·∫øu n√≥i v·ªÅ component lifecycle. V·ªõi hook, h·∫ßu nh∆∞ t·∫•t c·∫£ c√°c v·∫•n ƒë·ªÅ t∆∞∆°ng t·ª± c√≥ th·ªÉ ƒë∆∞·ª£c gi·∫£i quy·∫øt b·∫±ng c√°ch s·ª≠ d·ª•ng <code>useEffect</code>. N√≥i chung effects v√† lifecycle methods c√≥ c∆° ch·∫ø kh√°c nhau n√™n l√† kh√≥ ƒë·ªÉ so s√°nh, ph·∫ßn n√†y ch·ªâ gi·ªõi h·∫°n vi·ªác m√¥ t·∫£ v√†i v√≠ d·ª•. Effect x·ª©ng ƒë√°ng c√≥ m·ªôt ph·∫ßn ri√™ng ƒë·ªÉ b√†n.</p>\n<p>Th√¥ng th∆∞·ªùng vai tr√≤ c·ªßa lifeccycle methods l√† ƒë·ªÉ setup v√† teardown nh·ªØng th∆∞ vi·ªán b√™n th·ª© ba.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"input\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> DateTimePicker <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"awesome-date-time-picker\"</span>;\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    mounted() {\n      <span class=\"hljs-keyword\">this</span>.dateTimePickerInstance = <span class=\"hljs-keyword\">new</span> DateTimePicker(<span class=\"hljs-keyword\">this</span>.$refs.input);\n    },\n    beforeDestroy() {\n      <span class=\"hljs-keyword\">this</span>.dateTimePickerInstance.destroy();\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>S·ª≠ d·ª•ng <code>useEffect</code> b·∫°n c√≥ th·ªÉ khai b√°o m·ªôt <code>side effect</code> m√† c·∫ßn ph·∫£i ch·∫°y sau khi render. Khi b·∫°n tr·∫£ v·ªÅ m·ªôt h√†m callback t·ª´ <code>useEffect</code>, n√≥ s·∫Ω ƒë∆∞·ª£c g·ªçi khi effect ƒë∆∞·ª£c cleanup, c√≥ nghƒ©a l√† khi component b·ªã destroy.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useEffect, useRef } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> DateTimePicker <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"awesome-date-time-picker\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Component</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> dateTimePickerRef = useRef();\n\n  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> dateTimePickerInstance = <span class=\"hljs-keyword\">new</span> DateTimePicker(\n      dateTimePickerRef.current\n    );\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      dateTimePickerInstance.destroy();\n    };\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{dateTimePickerRef}</span> /&gt;</span></span>;\n}\n</code></pre>\n<p>Vi·ªác n√†y t∆∞∆°ng t·ª± ƒëƒÉng k√Ω m·ªôt <code>beforeDestroy</code> listener trong mounted ·ªü m·ªôt Vue component.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    mounted() {\n      <span class=\"hljs-keyword\">const</span> dateTimePicker = <span class=\"hljs-keyword\">new</span> DateTimePicker(<span class=\"hljs-keyword\">this</span>.$refs.input);\n\n      <span class=\"hljs-keyword\">this</span>.$once(<span class=\"hljs-string\">\"hook:beforeDestroy\"</span>, () =&gt; {\n        dateTimePicker.destroy();\n      });\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>T∆∞∆°ng t·ª± <code>useMemo</code>, <code>useEffect</code> nh·∫≠n v√†o m·ªôt array c√°c bi·∫øn ph·ª• thu·ªôc, nh∆∞ l√† parameter th·ª© hai.</p>\n<p>N·∫øu kh√¥ng khai b√°o b·∫•t k·ª≥ bi·∫øn ph·ª• thu·ªôc n√†o, effect s·∫Ω ch·∫°y sau m·ªói l·∫ßn render, v√† s·∫Ω ƒë∆∞·ª£c clean up tr∆∞·ªõc khi m·ªói l·∫ßn render k·∫ø ti·∫øp. Ch·ª©c nƒÉng n√†y t∆∞∆°ng t·ª± nh∆∞ m·ªôt s·ª± k·∫øt h·ª£p gi·ªØa <code>mounted</code>, <code>updated</code>, <code>beforeUpdate</code> and <code>beforeDestroy</code>.</p>\n<pre class=\"hljs\"><code>useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// Happens after every render</span>\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// Optional; clean up before next render</span>\n  };\n});\n</code></pre>\n<p>N·∫øu b·∫°n ch·ªâ ƒë·ªãnh effect kh√¥ng c√≥ bi·∫øn ph·ª• thu·ªôc n√†o, effect s·∫Ω ch·ªâ ch·∫°y l·∫ßn ƒë·∫ßu ti√™n khi component render l·∫ßn ƒë·∫ßu ti√™n, b·ªüi v√¨ n√≥ kh√¥ng c√≥ l√Ω do g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t. Ch·ª©c nƒÉng n√†y t∆∞∆°ng t·ª± nh∆∞ s·ª± k·∫øt h·ª£p gi·ªØa <code>mounted</code>, v√† <code>beforeDestroyed</code>.</p>\n<pre class=\"hljs\"><code>useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// Happens on mount</span>\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// Optional; clean up before unmount</span>\n  };\n}, []);\n</code></pre>\n<p>N·∫øu b·∫°n ch·ªâ ƒë·ªãnh bi·∫øn ph·ª• thu·ªôc effect s·∫Ω ch·ªâ ch·∫°y khi c√°c bi·∫øn ph·ª• thu·ªôc c√≥ thay ƒë·ªïi. Ch√∫ng ta s·∫Ω quay tr·ªü l·∫°i ƒë·ªÅ t√†i n√†y trong ph·∫ßn n√≥i v·ªÅ <code>watcher</code>.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n\nuseEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-comment\">// Happens when `count` changes</span>\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// Optional; clean up when `count` changed</span>\n  };\n}, [count]);\n</code></pre>\n<p>C·ªë g·∫Øng ƒë·ªÉ translate m·ªôt lifecycle th√†nh effect kh√¥ng ph·∫£i l√† √Ω t∆∞·ªüng hay. S·∫Ω t·ªët h∆°n n·∫øu b·∫°n xem m·ªçi th·ª© nh∆∞ m·ªôt t·∫≠p h·ª£p c·ªßa nh·ªØng side effect ƒë∆∞·ª£c khai b√°o. V√† c√°c effect ƒë∆∞·ª£c g·ªçi l√† nh·ªØng ph·∫ßn hi·ªán th·ª±c chi ti·∫øt.</p>\n<p>Gi·ªëng nh∆∞ Ryan Florence ƒë√£ t·ªïng h·ª£p d∆∞·ªõi n√†y:</p>\n<pre class=\"hljs\"><code>The question is not ‚Äúwhen does this effect run‚Äù the question is ‚Äúwith which state does this effect synchronize with‚Äù\n\nuseEffect(fn) // all state\nuseEffect(fn, []) // no state\nuseEffect(fn, [these, states])\n</code></pre>\n<h1>8. Watchers</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: <code>useEffect</code> hook</p>\n<p>Kh√°i ni·ªám v·ªÅ Watcher t∆∞∆°ng t·ª± nh∆∞ l√† lifecycle hook: ‚ÄúKhi X x·∫£y ra, th·ª±c hi·ªán Y‚Äù. Watcher kh√¥ng t·ªìn t·∫°i trong React, nh∆∞ng b·∫°n c√≥ th·ªÉ ƒë·∫°t ƒë∆∞·ª£c hi·ªáu ·ª©ng t∆∞∆°ng t·ª± v·ªõi <code>useEffect</code>.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- AjaxToggle.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"checked\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    data() {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">checked</span>: <span class=\"hljs-literal\">false</span>,\n      };\n    },\n\n    <span class=\"hljs-attr\">watch</span>: {\n      checked(checked) {\n        syncWithServer(checked);\n      },\n    },\n\n    <span class=\"hljs-attr\">methods</span>: {\n      syncWithServer(checked) {\n        <span class=\"hljs-comment\">// ...</span>\n      },\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useEffect, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">AjaxToggle</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [checked, setChecked] = useState(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">syncWithServer</span>(<span class=\"hljs-params\">checked</span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n  }\n\n  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    syncWithServer(checked);\n  }, [checked]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span>\n      <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{checked}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setChecked(!checked)}\n    /&gt;</span>\n  );\n}\n</code></pre>\n<p>Ch√∫ √Ω <code>useEffect</code> c≈©ng s·∫Ω ch·∫°y ·ªü l·∫ßn ƒë·∫ßu ti√™n. ƒêi·ªÅu n√†y t∆∞∆°ng t·ª± nh∆∞ khi s·ª≠ d·ª•ng <code>immediate</code> parameter trong Vue watcher.</p>\n<p>N·∫øu b·∫°n kh√¥ng mu·ªën effect ch·∫°y ·ªü l·∫ßn ƒë·∫ßu ti√™n b·∫°n ph·∫£i t·∫°o m·ªôt <code>ref</code> ƒë·ªÉ l∆∞u l·∫°i v·ªÅ vi·ªác render l·∫ßn ƒë·∫ßu ti√™n ƒë√£ ƒë∆∞·ª£c ch·∫°y hay ch∆∞a.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useEffect, useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">AjaxToggle</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [checked, setChecked] = useState(<span class=\"hljs-literal\">false</span>);\n\n  <span class=\"hljs-keyword\">const</span> firstRender = useRef(<span class=\"hljs-literal\">true</span>);\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">syncWithServer</span>(<span class=\"hljs-params\">checked</span>) </span>{\n    <span class=\"hljs-comment\">// ...</span>\n  }\n\n  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (firstRender.current) {\n      firstRender.current = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    syncWithServer(checked);\n  }, [checked]);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span>\n      <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{checked}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setChecked(!checked)}\n    /&gt;</span>\n  );\n}\n</code></pre>\n<h1>9. Slots &amp; scoped slots</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: JSX props or render props</p>\n<p>N·∫øu b·∫°n render m·ªôt template ·ªü gi·ªØa tag open v√† close c·ªßa component, react s·∫Ω truy·ªÅn n√≥ nh∆∞ l√† children prop.</p>\n<p>V·ªõi Vue b·∫°n c√≥ th·ªÉ khai b√°o m·ªôt <code>&lt;slot /&gt;</code> tag n∆°i m√† content thu·ªôc v·ªÅ. V·ªõi React th√¨ b·∫°n s·∫Ω render child prop.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- RedParagraph.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: red\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RedParagraph</span>(<span class=\"hljs-params\">{ children }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">color:</span> \"<span class=\"hljs-attr\">red</span>\" }}&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n}\n</code></pre>\n<p>B·ªüi v√¨ <code>slots</code> ch·ªâ c√≥ vai tr√≤ nh∆∞ l√† prop trong React, ch√∫ng ta kh√¥ng c·∫ßn ph·∫£i khai b√°o b·∫•t c·ª© g√¨ trong template, ta ch·ªâ c·∫ßn nh·∫≠n v√†o props s·ª≠ d·ª•ng JSX v√† render ch√∫ng ·ªü b·∫•t c·ª© n∆°i n√†o v√† th·ªùi ƒëi·ªÉm m√¨nh mu·ªën.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- Layout.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"flex\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"w-1/3\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"sidebar\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"flex-1\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- In use: --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> #<span class=\"hljs-attr\">sidebar</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> #<span class=\"hljs-attr\">default</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">post</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">post</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RedParagraph</span>(<span class=\"hljs-params\">{ sidebar, children }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"w-1/3\"</span>&gt;</span>{sidebar}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex-1\"</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n\n<span class=\"hljs-comment\">// In use:</span>\n\n<span class=\"hljs-keyword\">return</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">sidebar</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">nav</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>}&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Post</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Post</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span></span>\n);\n</code></pre>\n<p>Vue c√≥ scoped slots ƒë·ªÉ truy·ªÅn data xu·ªëng slot s·∫Ω ƒë∆∞·ª£c render.\nNh·ªØng ph·∫ßn ch√≠nh c·ªßa scopped slot s·∫Ω ƒë∆∞·ª£c render.</p>\n<p>Th√¥ng th∆∞·ªùng slot s·∫Ω ƒë∆∞·ª£c render tr∆∞·ªõc khi ch√∫ng ƒë∆∞·ª£c truy·ªÅn xu·ªëng parent component. Component cha s·∫Ω quy·∫øt ƒë·ªãnh s·∫Ω l√†m g√¨ v·ªõi nh·ªØng fragment ƒë∆∞·ª£c render.</p>\n<p>Scoped slot kh√¥ng th·ªÉ ƒë∆∞·ª£c render tr∆∞·ªõc component cha b·ªüi v√¨ n√≥ c·∫ßn d·ªØ li·ªáu truy·ªÅn v√†o c·ªßa component cha, n√≥i c√°ch kh√°c scoped slot l√† lazily evaluated slot.</p>\n<p>Lazily trong Javascript th√¨ r√µ r√†ng: ch·ªâ c·∫ßn wrap n√≥ l·∫°i trong m·ªôt function v√† g·ªçi n√≥ khi c·∫ßn thi·∫øt. N·∫øu b·∫°n c·∫ßn m·ªôt scoped slot trong React ch·ªâ c·∫ßn truy·ªÅn v√†o m·ªôt h√†m m√† tr·∫£ v·ªÅ m·ªôt template khi ƒë∆∞·ª£c g·ªçi.</p>\n<p>ƒê·ªëi v·ªõi m·ªôt scoped slot, ch√∫ng ta c√≥ th·ªÉ m·ªôt l·∫ßn n·ªØa s·ª≠ d·ª•ng children ho·∫∑c b·∫•t c·ª© prop n√†o kh√°c nh∆∞ l√† named scoped slot, tuy nhi√™n ch√∫ng ta s·∫Ω truy·ªÅn v√†o m·ªôt h√†m thay v√¨ tr·∫£ v·ªÅ m·ªôt template.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- CurrentUser.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">:user</span>=<span class=\"hljs-string\">\"user\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">inject</span>: [<span class=\"hljs-string\">\"user\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- In use: --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">current-user</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> #<span class=\"hljs-attr\">default</span>=<span class=\"hljs-string\">\"{ user }\"</span>&gt;</span> {{ user.firstName }} <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">current-user</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> UserContext <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./UserContext\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CurrentUser</span>(<span class=\"hljs-params\">{ children }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { user } = useContext(UserContext);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{children(user)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n}\n\n<span class=\"hljs-comment\">// In use:</span>\n\n<span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CurrentUser</span>&gt;</span>{(user) =&gt; user.firstName}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CurrentUser</span>&gt;</span></span>;\n</code></pre>\n<h1>10. Provide / inject</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: <code>createContext</code> v√† <code>useContext</code> hook</p>\n<p><code>Provide / inject</code> cho ph√©p m·ªôt component share state cho nh√°nh con c·ªßa c·ªßa. T∆∞∆°ng t·ª± b√™n React c√≥ context.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">&lt;!-- MyProvider.vue --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">provide</span>: {\n      <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">\"bar\"</span>,\n    },\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Must be rendered inside a MyProvider instance: --&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ foo }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">inject</span>: [<span class=\"hljs-string\">\"foo\"</span>],\n  };\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> { createContext, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> fooContext = createContext(<span class=\"hljs-string\">\"foo\"</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyProvider</span>(<span class=\"hljs-params\">{ children }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FooContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"foo\"</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FooContext.Provider</span>&gt;</span></span>;\n}\n\n<span class=\"hljs-comment\">// Must be rendered inside a MyProvider instance:</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyConsumer</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> foo = useContext(FooContext);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{foo}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>;\n}\n</code></pre>\n<h1>11. Custom directives</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: Components</p>\n<p>React kh√¥ng c√≥ kh√°i ni·ªám directive, tuy nhi√™n m·ªçi v·∫•n ƒë·ªÅ gi·∫£i quy·∫øt ƒë∆∞·ª£c b·∫±ng directive ƒë·ªÅu c√≥ th·ªÉ gi·∫£i quy·∫øt ƒë∆∞·ª£c b·∫±ng component.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-tooltip</span>=<span class=\"hljs-string\">\"Hello!\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">return</span> (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">\"Hello\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span></span>\n);\n</code></pre>\n<h1>12. Transition</h1>\n<p>T∆∞∆°ng ƒë∆∞∆°ng b√™n React: Th∆∞ vi·ªán b√™n th·ª© ba</p>\n<p>React kh√¥ng c√≥ h√†m builtin h·ªó tr·ª£ transition, n·∫øu b·∫°n t√¨m ki·∫øm nh·ªØng g√¨ t∆∞∆°ng t·ª± nh∆∞ b√™n Vue b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng th∆∞ vi·ªán kh√°c nh∆∞ l√†:</p>\n<ul>\n<li><a href=\"https://github.com/reactjs/react-transition-group\">https://github.com/reactjs/react-transition-group</a></li>\n<li><a href=\"https://www.framer.com/api/motion/\">https://www.framer.com/api/motion/</a></li>\n</ul>\n<h1>Ngu·ªìn tham kh·∫£o</h1>\n<p><a href=\"https://sebastiandedeyne.com/react-for-vue-developers/\">https://sebastiandedeyne.com/react-for-vue-developers/</a></p>\n","title":"React.js d√†nh cho d√¢n l·∫≠p tr√¨nh Vue.js","date":"2020-12-20"}},"__N_SSG":true}