{"pageProps":{"postData":{"id":"go_for_c_programmers","contentHtml":"<h1>1. Giới thiệu về Go</h1>\n<h2>1.1. Động lực</h2>\n<table>\n<thead>\n<tr>\n<th>Hiện tại đang có</th>\n<th style=\"text-align:center\">Muốn</th>\n<th style=\"text-align:right\">Golang</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Code khó hiểu và không an toàn</td>\n<td style=\"text-align:center\">Dễ đọc, code an toàn và hiệu quả</td>\n<td style=\"text-align:right\">Nhỏ gọn mà biểu diễn tốt</td>\n</tr>\n<tr>\n<td>Build code siêu chậm</td>\n<td style=\"text-align:center\">Một hệ thống có thể mở rộng (scale)</td>\n<td style=\"text-align:right\">Kiểu dữ liệu tĩnh (statically) và có hỗ trợ thu dọn rác (garbage collected)</td>\n</tr>\n<tr>\n<td>Không có hỗ trợ lập trình đồng bộ</td>\n<td style=\"text-align:center\">Hỗ trợ lập trình đồng bộ tốt</td>\n<td style=\"text-align:right\">Đối tượng nhưng không định hướng kiểu (type - oriented)</td>\n</tr>\n<tr>\n<td>Tools cũ kĩ</td>\n<td style=\"text-align:center\">Những Tools mà có thể hoạt động tại những hệ thống lớn như Google</td>\n<td style=\"text-align:right\">Hỗ trợ lập trình đồng bộ tốt</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">Hiện thực hiệu quả</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">Thư viện chuẩn phong phú</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">Biên dịch nhanh</td>\n</tr>\n<tr>\n<td></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">Tools có thể mở rộng được</td>\n</tr>\n</tbody>\n</table>\n<h2>1.2. Hello World</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  fmt.Println(<span class=\"hljs-string\">\"Hello, 世界!\"</span>)\n}\n</code></pre>\n<h2>1.3. Syntax</h2>\n<blockquote>\n<p>Syntax is not important… - unless you are a programmer.</p>\n</blockquote>\n<p>Rob Pike.</p>\n<blockquote>\n<p>The readability of programs is immeasurably more important than their writeability.</p>\n</blockquote>\n<p>Hints on Programming Language Design</p>\n<p>C. A. R. Hoare 1973</p>\n<h3>1.3.1. Quá dài dòng</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-function\">scoped_ptr&lt;logStats::LogStats&gt;\n    <span class=\"hljs-title\">logStats</span><span class=\"hljs-params\">(logStats::LogStats::NewLogStats(FLAGS_logStats,logStats::LogStats::kFIFO))</span></span>;\n</code></pre>\n<h3>1.3.2. Quá dày đặc</h3>\n<pre class=\"hljs\"><code>(n: <span class=\"hljs-type\">Int</span>) =&gt; (<span class=\"hljs-number\">2</span> to n) |&gt; (r =&gt; r.foldLeft(r.toSet)((ps, x) =&gt;\n    <span class=\"hljs-keyword\">if</span> (ps(x)) ps <span class=\"hljs-comment\">-- (x * x to n by x) else ps))</span>\n</code></pre>\n<h3>1.3.3. Chuẩn</h3>\n<pre class=\"hljs\"><code>t := time.Now()\n<span class=\"hljs-keyword\">switch</span> {\n<span class=\"hljs-keyword\">case</span> t.Hour() &lt; <span class=\"hljs-number\">12</span>:\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"morning\"</span>\n<span class=\"hljs-keyword\">case</span> t.Hour() &lt; <span class=\"hljs-number\">18</span>:\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"afternoon\"</span>\n<span class=\"hljs-keyword\">default</span>:\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"evening\"</span>\n}\n</code></pre>\n<h2>1.4. Đọc code Go</h2>\n<h3>1.4.1. Packages</h3>\n<p>Một chương trình Go sẽ bao gồm các packages.\nMột packages sẽ bao gồm 1 hoặc nhiều files mã nguồn (go files).\nMột file mã nguồn sẽ bắt đầu với lệnh package như khai báo dưới này:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Println(<span class=\"hljs-string\">\"Hello, 世界!\"</span>)\n}\n</code></pre>\n<p>Theo quy ước thì tất cả các file thuộc về một package sẽ nằm chung một thư mục.</p>\n<h3>1.4.2. Khai báo, sử dụng Pascal-style (từ trái sang phải)</h3>\n<p>Pattern: &lt;keyword&gt; &lt;tên&gt; [kiểu dữ liệu][khởi tạo]</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-keyword\">const</span> digits = <span class=\"hljs-string\">\"0123456789abcdef\"</span>\n\n<span class=\"hljs-keyword\">type</span> Point <span class=\"hljs-keyword\">struct</span> {\n    x, y <span class=\"hljs-keyword\">int</span>\n    tag  <span class=\"hljs-keyword\">string</span>\n}\n\n<span class=\"hljs-keyword\">var</span> s [<span class=\"hljs-number\">32</span>]<span class=\"hljs-keyword\">byte</span>\n\n<span class=\"hljs-keyword\">var</span> msgs = []<span class=\"hljs-keyword\">string</span>{<span class=\"hljs-string\">\"Hello, 世界\"</span>, <span class=\"hljs-string\">\"Ciao, Mondo\"</span>}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">itoa</span><span class=\"hljs-params\">(x, base <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span>\n</code></pre>\n<h3>1.4.3. Why?</h3>\n<pre class=\"hljs\"><code>p, q *Point\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">adder</span><span class=\"hljs-params\">(delta <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(x <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span>\n</code></pre>\n<h3>1.4.4. Constants (Hằng số)</h3>\n<p>Trong Go, constants thì chính xác về mặt toán học\nKhông cần thiết phải có hậu tố phía sau (như là -42LL, 7UL,…)</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> (\n    MaxUInt = <span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">64</span> - <span class=\"hljs-number\">1</span>\n    Pi      = <span class=\"hljs-number\">3.14159265358979323846264338327950288419716939937510582097494459</span>\n    Pi2     = Pi * Pi\n    Delta   = <span class=\"hljs-number\">2.0</span>\n)\n</code></pre>\n<p>Chỉ khi được sử dụng constant mới được cắt ngắn theo kích thước.</p>\n<pre class=\"hljs\"><code>    <span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">uint64</span> = MaxUInt\n    <span class=\"hljs-keyword\">var</span> pi2 <span class=\"hljs-keyword\">float32</span> = Pi2\n    <span class=\"hljs-keyword\">var</span> delta <span class=\"hljs-keyword\">int</span> = Delta\n</code></pre>\n<p>Lợi thế lớn là ở tính dễ đọc và dễ sử dụng</p>\n<h3>1.4.5. Types (Kiểu)</h3>\n<ul>\n<li>Phần quen thuộc:\n<ul>\n<li>Kiểu cơ bản, arrays, structs, pointers, functions.</li>\n</ul>\n</li>\n<li>Tuy nhiên:\n<ul>\n<li>string là kiểu cơ bản</li>\n<li>Không có tự động chuyển đổi kiểu cơ bản trong dòng lệnh.</li>\n<li>Không có tính toán pointer (con trỏ), pointer và array là khác nhau.</li>\n<li>Một kiểu function sẽ đại diện cho 1 function; context và tất cả</li>\n</ul>\n</li>\n<li>Mới:\n<ul>\n<li>Slices thay vì array pointer + độ dài khác nhau: []int</li>\n<li>Maps bởi vì mọi người đều cần nó: map[string]int</li>\n<li>Interfaces được dùng cho việc đa hình (polymorphism): interface {}</li>\n<li>Channels để giao tiếp giữa các goroutines: chan int</li>\n</ul>\n</li>\n</ul>\n<h3>1.4.6. Biến</h3>\n<ul>\n<li>Phần quen thuộc:</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">int</span>\n<span class=\"hljs-keyword\">var</span> p, q *Point\n<span class=\"hljs-keyword\">var</span> threshold <span class=\"hljs-keyword\">float64</span> = <span class=\"hljs-number\">0.75</span>\n</code></pre>\n<ul>\n<li>Mới: Kiểu có thể được diễn giải từ cách khởi tạo</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">42</span>       <span class=\"hljs-comment\">// type của i là int</span>\n<span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2.3i</span> <span class=\"hljs-comment\">// type của z là complex128</span>\n</code></pre>\n<ul>\n<li>Shortcut (bên trong functions):</li>\n</ul>\n<pre class=\"hljs\"><code>i := <span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">// type của i là int</span>\n</code></pre>\n<ul>\n<li>Thao tác lấy địa chỉ của bất kì biến nào là an toàn:</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">return</span> &amp;i\n</code></pre>\n<h3>1.4.7. Functions</h3>\n<p>Function có thể trả về nhiều giá trị:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">atoi</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, err error)</span></span>\n</code></pre>\n<p>Closures</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addler</span><span class=\"hljs-params\">(delta <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(x <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n  f := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(x <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n    <span class=\"hljs-keyword\">return</span> x + delta;\n  }\n  <span class=\"hljs-keyword\">return</span> f\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> inc = addler(<span class=\"hljs-number\">1</span>)\nfmt.Println(inc(<span class=\"hljs-number\">0</span>))\nfmt.Println(addler(<span class=\"hljs-number\">-1</span>)(<span class=\"hljs-number\">10</span>))\n</code></pre>\n<h3>1.4.8. Statments (Câu lệnh)</h3>\n<pre class=\"hljs\"><code>t := x;\n<span class=\"hljs-keyword\">switch</span> {\n<span class=\"hljs-keyword\">case</span> x == <span class=\"hljs-number\">0</span>:\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"0\"</span>\n<span class=\"hljs-keyword\">case</span> x &lt; <span class=\"hljs-number\">0</span>:\n  t = -x\n}\n<span class=\"hljs-keyword\">var</span> s [<span class=\"hljs-number\">32</span>]<span class=\"hljs-keyword\">byte</span>\ni := <span class=\"hljs-built_in\">len</span>(s)\n<span class=\"hljs-keyword\">for</span> t != <span class=\"hljs-number\">0</span> {\n  i--\n  s[i] = digits[t%base]\n  t /= base\n}\n<span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">0</span> {\n  i--\n  s[i] = <span class=\"hljs-string\">'-'</span>\n}\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">string</span>(s[i:])\n</code></pre>\n<h3>1.4.9. Statement của Go dành cho người lập trình C</h3>\n<ul>\n<li>Làm rõ ràng hơn:\n<ul>\n<li>Không có dấu chấm phẩy</li>\n<li>Gán nhiều giá trị</li>\n<li>++ và – cũng là câu lệnh</li>\n<li>Không có dấu mở đóng ngoặc ở điều kiện, dấu mở đóng ngoặc nhọn là bắt buộc</li>\n<li>Break được ngầm hiểu trong switch, làm rõ ràng việc fallthrough</li>\n</ul>\n</li>\n<li>Mới:\n<ul>\n<li>for range</li>\n<li>type switch</li>\n<li>go, select</li>\n<li>defer</li>\n</ul>\n</li>\n</ul>\n<h3>1.4.10. Assignment (Gán giá trị)</h3>\n<p>Có thể gán nhiều giá trị đồng thời</p>\n<pre class=\"hljs\"><code>a, b  = x, y\n</code></pre>\n<p>Bằng với</p>\n<pre class=\"hljs\"><code>t1 := x\nt2 := y\na = t1\nb = t2\n</code></pre>\n<p>Ví dụ</p>\n<pre class=\"hljs\"><code>a, b = b, a       <span class=\"hljs-comment\">// swap a and b</span>\ni, err = atoi(s)  <span class=\"hljs-comment\">// assign results of atoi</span>\ni, _ = atoi(<span class=\"hljs-number\">991</span>)  <span class=\"hljs-comment\">// discard 2nd value</span>\n</code></pre>\n<h3>1.4.11. Switch statements</h3>\n<p>Switch statement có thể có nhiều case và break được hiểu ngầm</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">switch</span> {\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>:\n  tag = <span class=\"hljs-string\">\"workday\"</span>\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>:\n  tag = <span class=\"hljs-string\">\"weekend\"</span>\n<span class=\"hljs-keyword\">default</span>:\n  tag = <span class=\"hljs-string\">\"invalid\"</span>\n}\n</code></pre>\n<p>Giá trị trong case thì không bắt buộc phải là constanst</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">switch</span> {\n<span class=\"hljs-keyword\">case</span> day &lt; <span class=\"hljs-number\">0</span> || day &gt; <span class=\"hljs-number\">6</span>:\n  tag = <span class=\"hljs-string\">\"invalid\"</span>\n<span class=\"hljs-keyword\">case</span> day == <span class=\"hljs-number\">0</span> || day == <span class=\"hljs-number\">6</span>:\n  tag = <span class=\"hljs-string\">\"weekend\"</span>\n<span class=\"hljs-keyword\">default</span>:\n  tag = <span class=\"hljs-string\">\"workday\"</span>\n}\n</code></pre>\n<h3>1.4.12. Vòng lặp for</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(primes); i++ {\n  fmt.Println(i, primes[i])\n}\n</code></pre>\n<p>Mệnh đề range cho phép duyệt qua array và slice dễ dàng</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">for</span> i, x := <span class=\"hljs-keyword\">range</span> primes {\n  fmt.Println(i, x)\n}\n</code></pre>\n<p>Những giá trị không sử dụng được bỏ qua bằng cách gán vào định danh (identifier) _</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> sum <span class=\"hljs-keyword\">int</span>\n<span class=\"hljs-keyword\">for</span> _, x := <span class=\"hljs-keyword\">range</span> primes {\n  sum += x\n}\n</code></pre>\n<h2>1.5. Dependencies (Phụ thuộc)</h2>\n<h3>1.5.1. Dependence trong Go</h3>\n<p>Một khai báo import được dùng để mô tả một dependency trong một package khác:</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"net/rpc\"</span>\n</code></pre>\n<p>Ở đây importing package phụ thuộc vào Go package “rpc”</p>\n<p>Đường dẫn import (“net/rpc”) xác định duy nhất một package; nhiều packages có thể có cùng tên, nhưng chúng lại có thể nằm ở những vị trí khác nhau (thư mục)</p>\n<p>Quy định thì tên của package sẽ là phần tử cuối cùng của đường dẫn import (ở đây là “rpc”)</p>\n<p>Chức năng export của package rpc thì sẵn có ở trong package qualifier (rpc):</p>\n<pre class=\"hljs\"><code>rpc.Call\n</code></pre>\n<p>Một khai báo import trong Go có vai trò giống như include trong C.</p>\n<h3>1.5.2. Dạo quanh một vòng với cách đặt tên trong Go</h3>\n<p>Cách mà tên hoạt động thì có ảnh hưởng quan trọng đến tính dễ đọc.</p>\n<p>Scope thì quyết định cách thức hoạt động của tên.</p>\n<p>Go có một cấu trúc scope tương đối đơn giản:</p>\n<ul>\n<li>universe</li>\n<li>package</li>\n<li>file (chỉ được dùng cho việc import)</li>\n<li>function</li>\n<li>block</li>\n</ul>\n<h3>1.5.3. Tính cục bộ của tên (TODO)</h3>\n<p>Tên viết hoa sẽ được exported: Name vs name</p>\n<p>Package qualifier luôn đại diện cho tên được import</p>\n<p>Component đầu tiên của mọi tên luôn được khai báo trong package hiện tại</p>\n<p>Đây là 1 trong những quyết định đúng đắn và khó khăn nhất trong Go</p>\n<h3>1.5.4. Mở rộng cục bộ (Locality scales)</h3>\n<p>Không có bất ngờ khi import</p>\n<ul>\n<li>Việc export thêm 1 tên sẽ không phá vỡ package của tôi.</li>\n</ul>\n<p>Tên không bị rò rỉ vượt ra khỏi package.\nTrong C, C++, Java tên y có thể gắn với bất cứ thứ gì.\nTrong Go, y (và cả Y) thì phải luôn được định nghĩa trong package.\nTrong Go, x.Y thì rõ ràng hơn: tìm x trong local, Y thì thuộc về x và chỉ có duy nhất một Y như vậy.</p>\n<p>Có hiệu quả tức thì cho tính dễ đọc.</p>\n<h3>1.5.5. Trở về với việc import</h3>\n<p>Importing một package có nghĩa là đọc một API được export từ package đó.\nThông tin export này là tự chứa (self-contain). Ví dụ:</p>\n<ul>\n<li>A imports B</li>\n<li>B imports C</li>\n<li>Những export từ B chứa tham khảo đến C</li>\n</ul>\n<p>Những dữ liệu export của B chứa tất cả những thông tin cần thiết về C. Một compiler thì không cần thiết phải đọc dữ liệu export bởi C.</p>\n<p>Việc này có ảnh hưởng rất lớn đến thời gian build!</p>\n<h3>1.5.6. Dependence trong C</h3>\n<p>File .h thì không tự chứa.\nNhư một kết quả, một compiler cần phải lặp lại việc đọc những file header cốt lõi.\nSử dụng ifdef vẫn yêu cầu preprocessor phải đọc rất nhiều code.\nHiển nhiên là việc này tốn rất nhiều thời gian…\nĐối với một hệ thống lớn như Google việc bùng nổ depedence là cấp số trở nên không thể tính toán được.\nMột bản build C++ của Google có thể đọc cùng một file header mười ngàn lần!!!</p>\n<h2>1.6. Tools (Công cụ)</h2>\n<h3>1.6.1. Giới thiệu</h3>\n<p>Hai compiler: gc, gccgo\nHỗ trợ nhiều platform khác nhau: x86 (32/64bit), ARM (32bit), Linux, BSD, OS X, …\nTự dộng format source code: gofmt\nTự động extract document: godoc\nTự động lấy API: gofix</p>\n<p>Tất cả (và còn hơn nữa)! dược tích hợp vào go command.</p>\n<h3>1.6.2. Build một chương trình Go</h3>\n<p>Một chương trình Go có thể dược biên dịch và linked mà không cần thêm bất kì thông tin gì như makefiles,…\nTheo quy định thì tất cả các file thuộc về một package sẽ nằm cùng trong thư mục.\nTất cả các package phụ thuộc sẽ được tìm thấy bằng cách truy theo dường dẫn import ở package ngoài cùng (main packagee).\nMột tool đơn được tích hợp có thể đảm nhận việc build cho từng file hoặc cả hệ thống.</p>\n<h3>1.6.3. Câu lệnh trong Go</h3>\n<p>Cách sử dụng:</p>\n<pre class=\"hljs\"><code>go <span class=\"hljs-built_in\">command</span> [arguments]\n</code></pre>\n<p>Các lệnh có thể:</p>\n<pre class=\"hljs\"><code>build       compile packages and dependencies\nclean       remove object files\ndoc         run godoc on package sources\nfix         run go tool fix on packages\nfmt         run gofmt on package sources\nget         download and install packages and dependencies\ninstall     compile and install packages and dependencies\nlist        list packages\nrun         compile and run Go program\n<span class=\"hljs-built_in\">test</span>        <span class=\"hljs-built_in\">test</span> packages\nvet         run go tool vet on packages\n</code></pre>\n<p><a href=\"http://golang.org/cmd/go/\">golang.org/cmd/go/</a></p>\n<h1>2. Object-oriented programming</h1>\n<h2>2.1. What is object-oriented programming?</h2>\n<blockquote>\n<p>Object-oriented programming (OOP) is a programming paradigm using objects – usually instances of a class – consisting of data fields and methods together with their interactions – to design applications and computer programs. Programming techniques may include features such as data abstraction, encapsulation, messaging, modularity, polymorphism, and inheritance. Many modern programming languages now support forms of OOP, at least as an option.</p>\n</blockquote>\n<p>(Wikipedia)</p>\n<h2>2.2. OOP chỉ yêu cầu thêm rất ít hỗ trợ từ phía ngôn ngữ lập trình</h2>\n<p>Chùng ta chỉ cần:</p>\n<ul>\n<li>Khái niệm về <em>Object</em></li>\n<li>Một cơ chế dể tương tác với chúng (<em>Methods</em>)</li>\n<li>Và hỗ trợ việc đa hình (<em>Interfaces</em>)</li>\n</ul>\n<p>Claim: Data abstraction, encapsulation, và modularity là những cơ chế độc lập với OOP và một ngôn ngữ hiện đại (OOP hoặc không) cũng đều nên hỗ trợ chúng một cách độc lập.</p>\n<h2>2.3. Lập trình hướng đối tượng trong Go</h2>\n<p>Có phương thức (methods) không có class</p>\n<p>Có interface không có phân chia cấp bậc (hierarchies)</p>\n<p>Sử dụng lại code mà không cần thừa kế (inheritance)</p>\n<p>Cụ thể:</p>\n<ul>\n<li>Bất cứ value nào cũng có thể là object</li>\n<li>Bất cứ type nào cũng có thể có vai trò là class</li>\n<li>Methods có thể đính kèm vào bất cứ type nào</li>\n<li>Interface hiện thực tính đa hình (polymorphism).</li>\n</ul>\n<h2>2.4. Methods</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-keyword\">type</span> Point <span class=\"hljs-keyword\">struct</span>{ x, y <span class=\"hljs-keyword\">int</span> }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PointToString</span><span class=\"hljs-params\">(p Point)</span> <span class=\"hljs-title\">string</span></span> {\n  <span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">\"Point{%d, %d}\"</span>, p.x, p.y)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p Point)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n  <span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">\"Point{%d, %d}\"</span>, p.x, p.y)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  p := Point{<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>}\n  fmt.Println(PointToString(p)) <span class=\"hljs-comment\">// static dispatch</span>\n  fmt.Println(p.String())       <span class=\"hljs-comment\">// static dispatch</span>\n  fmt.Println(p)\n}\n</code></pre>\n<p>Output:</p>\n<pre class=\"hljs\"><code>Point{3, 5}\nPoint{3, 5}\nPoint{3, 5}\n</code></pre>\n<h2>2.5. Methods có thể được đính kèm vào bất cứ type nào</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-keyword\">type</span> Celsius <span class=\"hljs-keyword\">float32</span>\n<span class=\"hljs-keyword\">type</span> Fahrenheit <span class=\"hljs-keyword\">float32</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(t Celsius)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span>           { <span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">\"%g°C\"</span>, t) }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(t Fahrenheit)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span>        { <span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">\"%g°F\"</span>, t) }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(t Celsius)</span> <span class=\"hljs-title\">ToFahrenheit</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">Fahrenheit</span></span> { <span class=\"hljs-keyword\">return</span> Fahrenheit(t*<span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">32</span>) }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  <span class=\"hljs-keyword\">var</span> t Celsius = <span class=\"hljs-number\">21</span>\n  fmt.Println(t.String())\n  fmt.Println(t)\n  fmt.Println(t.ToFahrenheit())\n}\n</code></pre>\n<h2>2.6. Interfaces</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">type</span> Stringer <span class=\"hljs-keyword\">interface</span> {\n     String() <span class=\"hljs-keyword\">string</span>\n}\n\n<span class=\"hljs-keyword\">type</span> Reader <span class=\"hljs-keyword\">interface</span> {\n     Read(p []<span class=\"hljs-keyword\">byte</span>) (n <span class=\"hljs-keyword\">int</span>, err error)\n}\n\n<span class=\"hljs-keyword\">type</span> Writer <span class=\"hljs-keyword\">interface</span> {\n     Write(p []<span class=\"hljs-keyword\">byte</span>) (n <span class=\"hljs-keyword\">int</span>, err error)\n}\n\n<span class=\"hljs-keyword\">type</span> Empty <span class=\"hljs-keyword\">interface</span>{}\n</code></pre>\n<p>Một interface định nghĩa một tập hợp các method\nMột type hiện thực tất cả các method của một interface được gọi là hiện thực interface.\nTất cả các type hiện thực interface interface{}</p>\n<h2>2.7. Dispatch động</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">type</span> Stringer <span class=\"hljs-keyword\">interface</span> {\n  String() <span class=\"hljs-keyword\">string</span>\n}\n\n<span class=\"hljs-keyword\">var</span> v Stringer\n<span class=\"hljs-keyword\">var</span> corner = Point{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}\n<span class=\"hljs-keyword\">var</span> boiling = Celsius(<span class=\"hljs-number\">100</span>)\n\nv = corner\nfmt.Println(v.String()) <span class=\"hljs-comment\">// dynamic dispatch</span>\nfmt.Println(v)\n\nv = boiling.ToFahrenheit()\nfmt.Println(v.String()) <span class=\"hljs-comment\">// dynamic dispatch</span>\nfmt.Println(v)\n</code></pre>\n<p>Một giá trị (ở đây là corner, boiling) của một type (Point, Celcius) mà hiện thực một interface (Stringer) có thể được assign vào một biến (v) của type đó.</p>\n<h2>2.8. Composition và chaining</h2>\n<p>Thông thường interface có quy mô nhỏ (Tầm 1 -3 method).</p>\n<p>Việc sử dụng xen kẽ các interface chính trong thư viện chuẩn giúp dễ dàng xâu chuỗi (chain) các API lại với nhau.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">package</span> io <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Copy</span><span class=\"hljs-params\">(dst Writer, src Reader)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int64</span>, error)</span></span>\n</code></pre>\n<p>Function io.Copy copy bằng cách đọc từ bất cứ Reader nào và ghi vào bất cứ Writer nào.</p>\n<p>Interface thường được giới thiệu là tạm thời, và giống như trong thực tế.</p>\n<p>Không có hệ thống phân cấp rõ ràng và do dó cũng không cần design bất cứ hệ thống phân cấp nào.</p>\n<h2>2.9. Cat</h2>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"flag\"</span>\n\t<span class=\"hljs-string\">\"io\"</span>\n\t<span class=\"hljs-string\">\"os\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tflag.Parse()\n\t<span class=\"hljs-keyword\">for</span> _, arg := <span class=\"hljs-keyword\">range</span> flag.Args() {\n\t\tf, err := os.Open(arg)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t\t}\n\t\t<span class=\"hljs-keyword\">defer</span> f.Close()\n\t\t_, err = io.Copy(os.Stdout, f)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t\t}\n\t}\n}\n</code></pre>\n<h2>2.10. Interface trong thực hành</h2>\n<ul>\n<li>\n<p>Method ở bất cứ type nào và những interface tạm tạo thành 1 kiểu lập trình hướng đối tượng nhỏ gọn.</p>\n</li>\n<li>\n<p>Go interface tạo nên một trừu tượng hậu facto.</p>\n</li>\n<li>\n<p>Không có phân cấp kiểu rõ ràng</p>\n</li>\n<li>\n<p>Plug and play bằng cách type-safe</p>\n</li>\n</ul>\n<h1>3. Đồng bộ (concurrency)</h1>\n<h2>3.1. Đồng bộ là gì?</h2>\n<p>Đồng bộ là việc đóng gói những thực thi tính toán độc lập.</p>\n<p>Đồng bộ là cách để cấu trúc phần mềm, như là một cách đặc biệt để viết clean code tương tác tốt với thế giới thực.</p>\n<p>Đồng bộ thì không phải việc tính toán song song</p>\n<h2>3.2. Đồng bộ không phải là song song</h2>\n<p>Đồng bộ không phải là song song, mặc dù nó kích hoạt tính song song.</p>\n<p>Nếu bạn chỉ có một processor, chương trình của bạn vẫn có thể đồng bộ nhưng nó không thể song song được.</p>\n<p>Nói một cách khác, một chương trình đồng bộ tốt có thể chạy một cách hiệu quả trên multiprocessor. Đặc tính này thì quan trọng …</p>\n<p>Để thêm thông tin chi tiết, hãy tham khảo link dưới này.</p>\n<p><a href=\"http://golang.org/s/concurrency-is-not-parallelism\">http://golang.org/s/concurrency-is-not-parallelism</a></p>\n<h2>3.3. Một model để xây dựng phần mềm</h2>\n<p>Dễ hiểu.</p>\n<p>Dễ dùng.</p>\n<p>Dễ nêu lý do.</p>\n<p>Bạn không cần phải là một chuyên gia!</p>\n<p>(Là dễ dàng hơn nhiều việc đối mặt với các loại xử lý song song (threads, semaphores, locks, barriers,…))</p>\n<p>Có một lịch sử dài đằng sau tính năng đồng bộ của Go, kể từ thời Hoare’s CSP năm 1978 và thậm chí là những câu lệnh đảm bảo của Dijkstra (1975).</p>\n<h2>3.4. Ví dụ đơn giản</h2>\n<h3>3.4.1. Một function đơn giản</h3>\n<p>Chúng ta cần một ví dụ để chỉ ra những đặc tính thú vị nổi bật của việc đồng bộ.</p>\n<p>Để tránh xao nhãng, chúng ta sẽ tạo ra một ví dụ đơn giản</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  f(<span class=\"hljs-string\">\"Hello, World\"</span>, <span class=\"hljs-number\">500</span>*time.Millisecond)\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(msg <span class=\"hljs-keyword\">string</span>, delay time.Duration)</span></span> {\n  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; ; i++ {\n    fmt.Println(msg, i)\n    time.Sleep(delay)\n  }\n}\n</code></pre>\n<h3>3.4.2 Bỏ qua nó</h3>\n<p>Dòng lệnh go thực thi function như bình thường, nhưng không bắt caller phải đợi.</p>\n<p>Nó chạy một goroutine.</p>\n<p>Chức năng tương tự như là &amp; ở cuối một lệnh shell.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"three\"</span>, <span class=\"hljs-number\">300</span>*time.Millisecond)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"six\"</span>, <span class=\"hljs-number\">600</span>*time.Millisecond)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"nine\"</span>, <span class=\"hljs-number\">900</span>*time.Millisecond)\n}\n</code></pre>\n<h3>3.4.3. Bỏ qua nó bớt đi một ít</h3>\n<p>Khi hàm main return, chương trình kết thúc và function f kết thúc theo nó.</p>\n<p>Chúng ta có thể gặp nhau một ít, và nhân tiện chứng mình rằng cả main và goroutine được tạo ra đều đang chạy</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"three\"</span>, <span class=\"hljs-number\">300</span>*time.Millisecond)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"six\"</span>, <span class=\"hljs-number\">600</span>*time.Millisecond)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"nine\"</span>, <span class=\"hljs-number\">900</span>*time.Millisecond)\n  time.Sleep(<span class=\"hljs-number\">3</span>*time.Second)\n  fmt.Println(<span class=\"hljs-string\">\"Done.\"</span>)\n}\n</code></pre>\n<h3>3.4.5. Goroutines</h3>\n<p>Goroutine là gì? Nó là một function thực thi độc lập, được khởi phát bởi một lệnh go.</p>\n<p>Nó có call stack riêng, sẽ thu giảm theo nhu cầu.</p>\n<p>Cheap. Trong thực tế sẽ có hàng ngàn, thậm chí hàng trăm ngàn goroutine.</p>\n<p>Không phải là thread.</p>\n<p>Có thể có chỉ một thread trong một chương trình với hàng ngàn goroutine.</p>\n<p>Thay vì như vậy, goroutine được phân luồng động thành các thread khi cần thiết để giữ tất cả goroutine hoạt động.</p>\n<p>Bạn có thể nghĩ goroutine gần giống như là một thread rất nhẹ (very cheap)</p>\n<h3>3.4.6. Channels</h3>\n<p>Một channel trong Go cung cấp một kết nối giữa hai goroutine, cho phép chung giao tiếp với nhau.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Khai báo và khởi tạo</span>\n<span class=\"hljs-keyword\">var</span> c <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span> c = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\n<span class=\"hljs-comment\">// hoặc</span>\nc := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Gửi đến một channel</span>\nc &lt;- <span class=\"hljs-number\">1</span>\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// Nhận từ một channel</span>\n<span class=\"hljs-comment\">// Dấu mũi tên ám chỉ hướng của dòng dữ liệu.</span>\nvalue = &lt;-c\n</code></pre>\n<h3>3.4.7. Sử dụng channel</h3>\n<p>Một channel sẽ kết nối hàm main và f goroutine để chúng có thể giao tiếp với nhau.</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  c := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"three\"</span>, <span class=\"hljs-number\">300</span>*time.Millisecond, c)\n  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++ {\n    fmt.Println(<span class=\"hljs-string\">\"Received\"</span>, &lt;-c) <span class=\"hljs-comment\">// Lệnh Receive chỉ là một giá trị</span>\n  }\n  fmt.Println(<span class=\"hljs-string\">\"Done.\"</span>)\n}\n</code></pre>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(msg <span class=\"hljs-keyword\">string</span>, delay time.Duration, c <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)</span></span> {\n  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; ; i++ {\n    c &lt;- fmt.Sprintf(<span class=\"hljs-string\">\"%s %d\"</span>, msg, i) <span class=\"hljs-comment\">// Bất cứ giá trị thích hợp nào có thể được gửi.</span>\n    time.Sleep(delay)\n  }\n}\n</code></pre>\n<h3>3.4.8. Đồng bộ</h3>\n<p>Khi function main thực thi &lt;-c, nó sẽ chờ một giá trị để được gửi.</p>\n<p>Tương tự, khi function f thực thi c&lt;-value, nó sẽ đợi một bên nhận sẵn sàng.</p>\n<p>Một bên gửi và bên nhận phải đều sẵn sàng thì mới có thể giao tiếp được. Ngược lại chúng ta phải đợi cho đến khi chúng sẵn sàng.</p>\n<p>Vì vậy các channel đều phải giao tiếp và đồng bộ.</p>\n<p>Channel có thể không buffer hoặc có buffer.</p>\n<h3>3.4.9. Sử dụng channel giữa nhiều goroutine</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  c := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"three\"</span>, <span class=\"hljs-number\">300</span>*time.Millisecond, c)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"six\"</span>, <span class=\"hljs-number\">600</span>*time.Millisecond, c)\n  <span class=\"hljs-keyword\">go</span> f(<span class=\"hljs-string\">\"nine\"</span>, <span class=\"hljs-number\">900</span>*time.Millisecond, c)\n\n  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++ {\n    fmt.Println(<span class=\"hljs-string\">\"Received\"</span>, &lt;-c)\n  }\n\n  fmt.Println(<span class=\"hljs-string\">\"Done.\"</span>)\n}\n</code></pre>\n<p>Một channel đơn có thể được dùng để giao tiếp giữa nhiều (không chỉ là hai) goroutine; nhiều goroutine có thể giao tiếp thông qua một hoặc nhiều channel.</p>\n<p>Điều này cho phép tạo ra sự đa dạng trong các cấu trúc đồng bộ (concurrency pattern).</p>\n<h3>3.4.10. Các yếu tố của một working-stealing scheduler</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">worker</span><span class=\"hljs-params\">(in <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>, out <span class=\"hljs-keyword\">chan</span> []<span class=\"hljs-keyword\">int</span>)</span></span> {\n  <span class=\"hljs-keyword\">for</span> {\n    order := &lt;-in <span class=\"hljs-comment\">// Nhận một chỉ thị công việc.</span>\n    result := factor(order)\n  }\n}\n</code></pre>\n<p>Các worker sử dụng hai channel để giao tiếp:</p>\n<ul>\n<li>in channel đợi các tính toán về chỉ thị công việc</li>\n<li>out channel giao tiếp kết quả.</li>\n<li>Bởi vì cân bằng tải, một worker (một cách rất chậm) sẽ tính toán danh sách các ước chung của một chỉ thị cho sẵn.</li>\n</ul>\n<h3>3.4.11. Một matching giữa producer và consumer</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">producer</span><span class=\"hljs-params\">(out <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)</span></span> {\n  <span class=\"hljs-keyword\">for</span> order := <span class=\"hljs-number\">0</span>; ; order++ {\n    out &lt;- order <span class=\"hljs-comment\">// Tạo ra một chỉ thị công việc.</span>\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">consumer</span><span class=\"hljs-params\">(in <span class=\"hljs-keyword\">chan</span> []<span class=\"hljs-keyword\">int</span>, n <span class=\"hljs-keyword\">int</span>)</span></span> {\n  <span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ {\n    result := &lt;-in <span class=\"hljs-comment\">// Nhận một kết quả</span>\n    fmt.Println(<span class=\"hljs-string\">\"Consumed\"</span>, result)\n  }\n}\n</code></pre>\n<p>Bên producer tạo ra và cung cấp không giới hạn chỉ thị công việc và gửi chúng ra ngoài.</p>\n<p>Bên consumer nhận n kết quả từ in channel và sau đó kết thúc.</p>\n<h3>3.4.12. Gộp tất cả chung với nhau</h3>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n  start := time.Now()\n  in := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)    <span class=\"hljs-comment\">// Channel mà thứ tự công việc sẽ được nhận.</span>\n  out := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> []<span class=\"hljs-keyword\">int</span>) <span class=\"hljs-comment\">// Channel mà kết quả được trả về.</span>\n  <span class=\"hljs-keyword\">go</span> producer(in)\n  <span class=\"hljs-keyword\">go</span> worker(in, out)      <span class=\"hljs-comment\">// Khởi phát một worker.</span>\n  consumer(out, <span class=\"hljs-number\">100</span>)\n  fmt.Println(time.Since(start))\n}\n</code></pre>\n<p>Chúng ta sử dụng một worker đảm nhận tất cả công việc liên quan đến cân bằng tải (work load).</p>\n<p>Bởi vì chỉ có duy nhất một worker, chúng ta có thể thấy kết quả trả ngược về đúng thứ tự.</p>\n<p>Đoạn này chạy khá là chậm…</p>\n<h3>3.4.13. Sử dụng 10 worker</h3>\n<pre class=\"hljs\"><code>in := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\nout := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> []<span class=\"hljs-keyword\">int</span>)\n<span class=\"hljs-keyword\">go</span> producer(in) <span class=\"hljs-comment\">// Khởi phát 10 workers.</span>\n\n<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++ {\n  <span class=\"hljs-keyword\">go</span> worker(in, out)\n}\n\nconsumer(out, <span class=\"hljs-number\">100</span>)\n</code></pre>\n<p>Một worker sẵn sàng sẽ đọc các chỉ thị tiếp theo từ channel in và bắt đầu làm việc từ đó.</p>\n<p>Một worker sẵn sàng sẽ tiến hành với các chỉ thị tiếp theo và cứ thế tiếp diễn.</p>\n<p>Bởi vì chúng ta có nhiều worker và vì vậy những chỉ thị khác nhau sẽ tốn thời gian khác nhau, chúng ta thấy kết quả trả về không đúng thứ tự nữa.</p>\n<p>Trong một hệ thống nhiều core, nhiều worker có thể chạy hoàn toàn song song với nhau.</p>\n<p>Đoạn mã này thì chạy nhanh hơn nhiều…</p>\n<h3>3.4.14. Cách tiếp cận của Go</h3>\n<p>Không giao tiếp bằng cách chia sẻ bộ nhớ, mà là chia sẻ bộ nhớ bằng  cách giao tiếp.</p>\n<h2>Links tham khảo</h2>\n<ul>\n<li>\n<p>Trang chủ Go</p>\n<p><a href=\"http://golang.org\">golang.org</a></p>\n</li>\n<li>\n<p>Go Tour (học Go qua browser của bạn)</p>\n<p><a href=\"http://tour.golang.org\">tour.golang.org</a></p>\n</li>\n<li>\n<p>Tài liệu về package:</p>\n<p><a href=\"http://golang.org/pkg\">golang.org/pkg</a></p>\n</li>\n<li>\n<p>Các bài viết phong phú khác:</p>\n<p><a href=\"http://golang.org/doc\">golang.org/doc</a></p>\n</li>\n</ul>\n","title":"Golang dành cho dân lập trình C","date":"2020-03-15"}},"__N_SSG":true}